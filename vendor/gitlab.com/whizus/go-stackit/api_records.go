/*
 * CAMAO.domains
 *
 * <h1>Additional info</h1> <h2><a href=\"/nexus-info\">Nexus Info</h2></a>  <h2><a href=\"/markdown/OPENAPIGATEWAY-USAGE.MD\">OPENAPIGATEWAY-USAGE.MD</h2></a> <h2><a href=\"/markdown/CHANGELOG.md\">CHANGELOG.md</h2></a> <h2><a href=\"/markdown/version.md\">version.md</h2></a>
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackit

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// RecordsApiService RecordsApi service
type RecordsApiService service

type ApiApiDnsRecordsDeleteRequest struct {
	ctx         _context.Context
	ApiService  *RecordsApiService
	provider    *string
	zone        *string
	name        *string
	recordType  *RecordType
	environment *string
	requestBody *map[string]string
}

func (r ApiApiDnsRecordsDeleteRequest) Provider(provider string) ApiApiDnsRecordsDeleteRequest {
	r.provider = &provider
	return r
}
func (r ApiApiDnsRecordsDeleteRequest) Zone(zone string) ApiApiDnsRecordsDeleteRequest {
	r.zone = &zone
	return r
}
func (r ApiApiDnsRecordsDeleteRequest) Name(name string) ApiApiDnsRecordsDeleteRequest {
	r.name = &name
	return r
}
func (r ApiApiDnsRecordsDeleteRequest) RecordType(recordType RecordType) ApiApiDnsRecordsDeleteRequest {
	r.recordType = &recordType
	return r
}
func (r ApiApiDnsRecordsDeleteRequest) Environment(environment string) ApiApiDnsRecordsDeleteRequest {
	r.environment = &environment
	return r
}
func (r ApiApiDnsRecordsDeleteRequest) RequestBody(requestBody map[string]string) ApiApiDnsRecordsDeleteRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiApiDnsRecordsDeleteRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsRecordsDeleteExecute(r)
}

/*
 * ApiDnsRecordsDelete Deletes records which match the specified criterias
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsRecordsDeleteRequest
 */
func (a *RecordsApiService) ApiDnsRecordsDelete(ctx _context.Context) ApiApiDnsRecordsDeleteRequest {
	return ApiApiDnsRecordsDeleteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *RecordsApiService) ApiDnsRecordsDeleteExecute(r ApiApiDnsRecordsDeleteRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordsApiService.ApiDnsRecordsDelete")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.provider == nil {
		executionError.error = "provider is required and must be specified"
		return nil, executionError
	}
	if r.zone == nil {
		executionError.error = "zone is required and must be specified"
		return nil, executionError
	}
	if r.name == nil {
		executionError.error = "name is required and must be specified"
		return nil, executionError
	}
	if r.recordType == nil {
		executionError.error = "recordType is required and must be specified"
		return nil, executionError
	}

	localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	localVarQueryParams.Add("zone", parameterToString(*r.zone, ""))
	localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	localVarQueryParams.Add("recordType", parameterToString(*r.recordType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}

type ApiApiDnsRecordsGetRequest struct {
	ctx         _context.Context
	ApiService  *RecordsApiService
	provider    *string
	zone        *string
	environment *string
	recordType  *RecordType
	name        *string
	pageToken   *string
	pageSize    *int32
}

func (r ApiApiDnsRecordsGetRequest) Provider(provider string) ApiApiDnsRecordsGetRequest {
	r.provider = &provider
	return r
}
func (r ApiApiDnsRecordsGetRequest) Zone(zone string) ApiApiDnsRecordsGetRequest {
	r.zone = &zone
	return r
}
func (r ApiApiDnsRecordsGetRequest) Environment(environment string) ApiApiDnsRecordsGetRequest {
	r.environment = &environment
	return r
}
func (r ApiApiDnsRecordsGetRequest) RecordType(recordType RecordType) ApiApiDnsRecordsGetRequest {
	r.recordType = &recordType
	return r
}
func (r ApiApiDnsRecordsGetRequest) Name(name string) ApiApiDnsRecordsGetRequest {
	r.name = &name
	return r
}
func (r ApiApiDnsRecordsGetRequest) PageToken(pageToken string) ApiApiDnsRecordsGetRequest {
	r.pageToken = &pageToken
	return r
}
func (r ApiApiDnsRecordsGetRequest) PageSize(pageSize int32) ApiApiDnsRecordsGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiApiDnsRecordsGetRequest) Execute() ([]Record, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsRecordsGetExecute(r)
}

/*
 * ApiDnsRecordsGet Retrieves the DNS zone's resource records
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsRecordsGetRequest
 */
func (a *RecordsApiService) ApiDnsRecordsGet(ctx _context.Context) ApiApiDnsRecordsGetRequest {
	return ApiApiDnsRecordsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []Record
 */
func (a *RecordsApiService) ApiDnsRecordsGetExecute(r ApiApiDnsRecordsGetRequest) ([]Record, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []Record
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordsApiService.ApiDnsRecordsGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.provider == nil {
		executionError.error = "provider is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.zone == nil {
		executionError.error = "zone is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	localVarQueryParams.Add("zone", parameterToString(*r.zone, ""))
	if r.recordType != nil {
		localVarQueryParams.Add("recordType", parameterToString(*r.recordType, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("pageToken", parameterToString(*r.pageToken, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiApiDnsRecordsPostRequest struct {
	ctx                      _context.Context
	ApiService               *RecordsApiService
	createRecordRequestModel *CreateRecordRequestModel
}

func (r ApiApiDnsRecordsPostRequest) CreateRecordRequestModel(createRecordRequestModel CreateRecordRequestModel) ApiApiDnsRecordsPostRequest {
	r.createRecordRequestModel = &createRecordRequestModel
	return r
}

func (r ApiApiDnsRecordsPostRequest) Execute() (Record, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsRecordsPostExecute(r)
}

/*
 * ApiDnsRecordsPost Creates a new DNS resource record
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsRecordsPostRequest
 */
func (a *RecordsApiService) ApiDnsRecordsPost(ctx _context.Context) ApiApiDnsRecordsPostRequest {
	return ApiApiDnsRecordsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Record
 */
func (a *RecordsApiService) ApiDnsRecordsPostExecute(r ApiApiDnsRecordsPostRequest) (Record, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Record
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecordsApiService.ApiDnsRecordsPost")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.createRecordRequestModel == nil {
		executionError.error = "createRecordRequestModel is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRecordRequestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
