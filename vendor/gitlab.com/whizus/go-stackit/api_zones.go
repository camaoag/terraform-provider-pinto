/*
 * CAMAO.domains
 *
 * <h1>Additional info</h1> <h2><a href=\"/nexus-info\">Nexus Info</h2></a>  <h2><a href=\"/markdown/OPENAPIGATEWAY-USAGE.MD\">OPENAPIGATEWAY-USAGE.MD</h2></a> <h2><a href=\"/markdown/CHANGELOG.md\">CHANGELOG.md</h2></a> <h2><a href=\"/markdown/version.md\">version.md</h2></a>
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackit

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ZonesApiService ZonesApi service
type ZonesApiService service

type ApiApiDnsZonesGetRequest struct {
	ctx         _context.Context
	ApiService  *ZonesApiService
	provider    *string
	environment *string
	pageToken   *string
	pageSize    *int32
}

func (r ApiApiDnsZonesGetRequest) Provider(provider string) ApiApiDnsZonesGetRequest {
	r.provider = &provider
	return r
}
func (r ApiApiDnsZonesGetRequest) Environment(environment string) ApiApiDnsZonesGetRequest {
	r.environment = &environment
	return r
}
func (r ApiApiDnsZonesGetRequest) PageToken(pageToken string) ApiApiDnsZonesGetRequest {
	r.pageToken = &pageToken
	return r
}
func (r ApiApiDnsZonesGetRequest) PageSize(pageSize int32) ApiApiDnsZonesGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiApiDnsZonesGetRequest) Execute() ([]Zone, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZonesGetExecute(r)
}

/*
 * ApiDnsZonesGet Retrieves the DNS zones assigned to the account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsZonesGetRequest
 */
func (a *ZonesApiService) ApiDnsZonesGet(ctx _context.Context) ApiApiDnsZonesGetRequest {
	return ApiApiDnsZonesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return []Zone
 */
func (a *ZonesApiService) ApiDnsZonesGetExecute(r ApiApiDnsZonesGetRequest) ([]Zone, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []Zone
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZonesApiService.ApiDnsZonesGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zones"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.provider == nil {
		executionError.error = "provider is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("pageToken", parameterToString(*r.pageToken, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiApiDnsZonesPostRequest struct {
	ctx                    _context.Context
	ApiService             *ZonesApiService
	createZoneRequestModel *CreateZoneRequestModel
}

func (r ApiApiDnsZonesPostRequest) CreateZoneRequestModel(createZoneRequestModel CreateZoneRequestModel) ApiApiDnsZonesPostRequest {
	r.createZoneRequestModel = &createZoneRequestModel
	return r
}

func (r ApiApiDnsZonesPostRequest) Execute() (Zone, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZonesPostExecute(r)
}

/*
 * ApiDnsZonesPost Creates a new DNS zone
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiDnsZonesPostRequest
 */
func (a *ZonesApiService) ApiDnsZonesPost(ctx _context.Context) ApiApiDnsZonesPostRequest {
	return ApiApiDnsZonesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Zone
 */
func (a *ZonesApiService) ApiDnsZonesPostExecute(r ApiApiDnsZonesPostRequest) (Zone, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Zone
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZonesApiService.ApiDnsZonesPost")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zones"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.createZoneRequestModel == nil {
		executionError.error = "createZoneRequestModel is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createZoneRequestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiApiDnsZonesZoneDeleteRequest struct {
	ctx         _context.Context
	ApiService  *ZonesApiService
	provider    *string
	zone        string
	environment *string
}

func (r ApiApiDnsZonesZoneDeleteRequest) Provider(provider string) ApiApiDnsZonesZoneDeleteRequest {
	r.provider = &provider
	return r
}
func (r ApiApiDnsZonesZoneDeleteRequest) Environment(environment string) ApiApiDnsZonesZoneDeleteRequest {
	r.environment = &environment
	return r
}

func (r ApiApiDnsZonesZoneDeleteRequest) Execute() (*_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZonesZoneDeleteExecute(r)
}

/*
 * ApiDnsZonesZoneDelete Deletes a DNS zone from the passed provider
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param zone Name of the DNS zone to delete
 * @return ApiApiDnsZonesZoneDeleteRequest
 */
func (a *ZonesApiService) ApiDnsZonesZoneDelete(ctx _context.Context, zone string) ApiApiDnsZonesZoneDeleteRequest {
	return ApiApiDnsZonesZoneDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		zone:       zone,
	}
}

/*
 * Execute executes the request
 */
func (a *ZonesApiService) ApiDnsZonesZoneDeleteExecute(r ApiApiDnsZonesZoneDeleteRequest) (*_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZonesApiService.ApiDnsZonesZoneDelete")
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zones/{zone}"
	localVarPath = strings.Replace(localVarPath, "{"+"zone"+"}", _neturl.PathEscape(parameterToString(r.zone, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.provider == nil {
		executionError.error = "provider is required and must be specified"
		return nil, executionError
	}

	localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, executionError
}

type ApiApiDnsZonesZoneGetRequest struct {
	ctx         _context.Context
	ApiService  *ZonesApiService
	provider    *string
	zone        string
	environment *string
}

func (r ApiApiDnsZonesZoneGetRequest) Provider(provider string) ApiApiDnsZonesZoneGetRequest {
	r.provider = &provider
	return r
}
func (r ApiApiDnsZonesZoneGetRequest) Environment(environment string) ApiApiDnsZonesZoneGetRequest {
	r.environment = &environment
	return r
}

func (r ApiApiDnsZonesZoneGetRequest) Execute() (Zone, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.ApiDnsZonesZoneGetExecute(r)
}

/*
 * ApiDnsZonesZoneGet Loads the specified DNS zone
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param zone Name of the DNS zone to load
 * @return ApiApiDnsZonesZoneGetRequest
 */
func (a *ZonesApiService) ApiDnsZonesZoneGet(ctx _context.Context, zone string) ApiApiDnsZonesZoneGetRequest {
	return ApiApiDnsZonesZoneGetRequest{
		ApiService: a,
		ctx:        ctx,
		zone:       zone,
	}
}

/*
 * Execute executes the request
 * @return Zone
 */
func (a *ZonesApiService) ApiDnsZonesZoneGetExecute(r ApiApiDnsZonesZoneGetRequest) (Zone, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  Zone
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ZonesApiService.ApiDnsZonesZoneGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/api/dns/Zones/{zone}"
	localVarPath = strings.Replace(localVarPath, "{"+"zone"+"}", _neturl.PathEscape(parameterToString(r.zone, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.provider == nil {
		executionError.error = "provider is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
